# An ASC implementation of the following Pascal program
#
#	program fact ( input, output );
#		var	n	: integer;
#		
#		function factorial ( n : integer ): integer;
#		begin
#			if n = 1 then
#				factorial := 1
#			else
#				factorial := n * factorial ( n - 1 )
#		end;
#	
#	begin
#		read ( n );
#	
#		while n >= 0 do begin
#			if n = 0 then
#				writeln ( 0, '! = ', 1)
#			else
#				writeln ( n, '! = ', factorial ( n ));
#			read ( n )
#		end;
#	
#		writeln (' NEGATIVE');
#	end.

#######

#	program fact ( input, output );
#		var	n	: integer;

	ADJUST	1	# n is at 0[0]

#	begin

start	

#		read ( n );
	READI			
	IFERR	Rerror
	POP	0[0]
#!T=100

#		while n >= 0 do begin
startwhile

	PUSH	0[0]
	CONSTI	0
	LTI
	IFNZ	endwhile

#			if n = 0 then
	PUSH	0[0]
	CONSTI  0
	EQI
	IFZ	else1

#				writeln ( 0, '! = ', 1)
	CONSTI	0
	WRITEI
	CONSTI	33	# !
	WRITEC
	CONSTI	32	# sp
	WRITEC	
	CONSTI	61	# =
	WRITEC
	CONSTI	32	# sp
	WRITEC
	CONSTI 	1
	WRITEI
	CONSTI	10	# lf
	WRITEC
	GOTO	endif1

#			else
	
else1
#				writeln ( n, '! = ', factorial ( n ));
	PUSH	0[0]
	WRITEI
	CONSTI	33	# !
	WRITEC
	CONSTI	32	# sp
	WRITEC	
	CONSTI	61	# =
	WRITEC
	CONSTI	32	# sp
	
	WRITEC

	!T=20

	PUSH	0[0]		# for the parameter and the result
	CALL	0,fact
	WRITEI

	CONSTI	10	# lf
	WRITEC
endif1

#			read ( n )
	READI
	IFERR	Rerror
	POP	0[0]

#		end;

	GOTO 	startwhile

endwhile

#		writeln (' NEGATIVE');

	CONSTI	78	# NEGATIVE
	WRITEC 
	CONSTI	69
	WRITEC
	CONSTI	71
	WRITEC
	CONSTI	65
	WRITEC
	CONSTI	84
	WRITEC
	CONSTI	73
	WRITEC
	CONSTI	86
	WRITEC
	CONSTI	69
	WRITEC
	CONSTI	10
	WRITEC
	GOTO	stop

#	end.
Rerror
	CONSTI	82
	WRITEC	
	CONSTI	69
	WRITEC	
	CONSTI	65
	WRITEC	
	CONSTI	68
	WRITEC	
	CONSTI	73
	WRITEC	
	CONSTI	32
	WRITEC	
	CONSTI	69
	WRITEC	
	CONSTI	82
	WRITEC	
	CONSTI	82
	WRITEC	
	CONSTI	10
	WRITEC	

stop	STOP


#		function factorial ( n : integer ): integer;
fact	
	PUSH	-3[0]		# n
	ADJUST	1		# for the result
#!D
#		begin
#			if n = 1 then
	PUSH	0[0]
	CONSTI	1		
	EQI
	IFZ	else2

#				factorial := 1
	CONSTI	1		
	POP	1[0]
	GOTO	endif2

#			else

else2	

#				factorial := n * factorial ( n - 1 )

	PUSH	0[0]		# copy n
	PUSH	0[0]		# compute the parameter n - 1
	CONSTI	1
	SUBI
	CALL	0, fact		# compute factorial ( n - 1 )
	MULI			# *
	POP	1[0]		# :=

endif2

#		end;

	POP	-3[0]		# return the result
	ADJUST	-1		# pop the parameter
	RET	0
