ml_string_EQ

	ADJUST 2 # pointers for each string 

	PUSH	-3[0] # size
	PUSH	-3[0] # size
	ADDI
	CONSTI	3
	ADDI
	CONSTI	-1	
	MULI	
	POP	0[0] # pointer to first string -3 - 2N

	PUSH	-3[0] # size
	CONSTI	3
	ADDI
	CONSTI	-1	
	MULI	
	POP	1[0] # pointer to second string - 3 - N

	## every char must be the same!

ml_string_EQ_loop

	# if size = 0, done
	PUSH	-3[0] # size
	IFZ	ml_string_EQ_true

	PUSH	1[0]
	PUSHI	0
	PUSH	0[0]
	PUSHI	0
	EQI
	IFZ	ml_string_EQ_false # not equal

	# increment pointers
	PUSH	1[0]
	CONSTI	1
	ADDI
	POP	1[0]

	PUSH	0[0]
	CONSTI	1
	ADDI
	POP	0[0]

	# decrement size
	PUSH	-3[0] # size
	CONSTI	-1
	ADDI
	POP	-3[0] # size

	GOTO	ml_string_EQ_loop

ml_string_EQ_false
	# return false
	CONSTI	0
	POP	-3[0]
	ADJUST -2
	RET	0

ml_string_EQ_true
	# return true
	CONSTI	1
	POP	-3[0]
	ADJUST -2
	RET	0

#
########## NULL COMPARE FUNCTION ###########
#ml_compare_notnull_strings
#
#        PUSH 0[0]
#        PUSHI
#        NOT
#
#        PUSH 1[0]
#        PUSHI
#        NOT
#        
#        AND
#        IFNZ ml_both_null
#
#        PUSH 0[0]
#        PUSHI
#
#        IFZ ml_compare_end_notnull_strings
#        
#        PUSH 1[0]
#        PUSHI 
#
#        IFZ ml_compare_end_notnull_strings
#
#ml_both_null
#        # return 1 if not null
#        CONSTI 1
#        POP 2[0]
#        RET 1
#
#ml_compare_end_notnull_strings
#        #if one is null return 0
#        CONSTI 0
#        POP 2[0]
#        RET 1
#
#
##################################################
## Compare two strings
##################################################
#
#ml_compare_strings
#
#	
#
#	# nullChar, startString, returnValue
#	ADJUST 3
#	PUSH	-4[0]	# pointer to first char in string
#        POP 0[0]    #Location of first letter   
#
#        PUSH	-5[0]	# pointer to first char in string
#        POP 1[0] #locaiton of first letter second string
#
#        PUSH 0[0]
#        PUSHI
#        
#        CONSTI 0
#        POP 2[0]
#
#        # CHECKS IF STRING ARE NOT NULL
#        CALL 1, ml_compare_notnull_strings
#        
#       # PUSH 2[0]
#
#        IFZ ml_compare_noteq_strings
#        GOTO ml_compare_loop_strings
#
#
########### END NULL COMPARE FUNCTION ########
##
#ml_compare_loop_strings
#
#        # CHECK IF THEY ARE EQUAL
#        PUSH 0[0]
#        PUSHI
#
#        PUSH 1[0]
#        PUSHI
#        EQI
#
#        ## NOT EQUAL
#        IFZ ml_compare_noteq_strings
#
#        # CHECK IF ONE IS NULL AND THE OTHER ISN'T
#        CONSTI 0
#        POP 2[0]
#        CALL 1,  ml_compare_notnull_strings
#
#        PUSH 2[0]
#
#        IFZ ml_compare_noteq_strings
#
#
######## IF BOTH NULL
#
#        PUSH 0[0]
#        PUSHI
#        CONSTI 0
#        EQI
#
#        PUSH 1[0]
#        PUSHI
#        CONSTI 0
#        EQI
#
#        AND
#        IFNZ ml_compare_ret_strings
#
#        # ELSE
#        #INCREMENT ADDRESS OF STRING
#        PUSH 0[0]
#        CONSTI 1
#        ADDI 
#        POP 0[0]
#
#        PUSH 1[0]
#        CONSTI 1
#        ADDI 
#        POP 1[0]
#        
#        GOTO ml_compare_loop_strings   
#
#
## return to calling function
##
##
#ml_compare_ret_strings
#
#        CONSTI 1
#        POP -3[0]
#        ADJUST -3
#        RET 0
#
#ml_compare_noteq_strings
#
#        CONSTI 0
#        POP -3[0]
#        ADJUST -3
#
#        RET 0
