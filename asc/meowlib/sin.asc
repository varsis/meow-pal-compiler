################################################################################
# sin(x) - find the value of the sine function at value x
################################################################################

# Test
	READR
	CALL	0, ml_sin
	!D
	STOP

ml_sin
	# sine function approximation using by fitting to a 
	# quadratic curve
	# http://lab.polygonal.de/?p=205 

	# result
	ADJUST	1

	# result = 0
	CONSTR	0
	POP	0[0]

	# Wrap to interval [-pi, pi]
ml_sin_lower
	# if (x < -pi)
	PUSH	-3[0] 
	CONSTR	-3.14159265
	LTR
	IFZ	ml_sin_upper

	# x = x + 2*pi
	PUSH	-3[0]
	CONSTR	6.28318531
	ADDR
	POP	-3[0]
	GOTO	ml_sin_xltz

ml_sin_upper
	# if (x > pi)
	PUSH	-3[0]
	CONSTR	3.14159265
	GTR
	IFZ	ml_sin_xltz

	# x = x - 2*pi
	PUSH	-3[0]
	CONSTR	6.28318531
	SUBR
	POP	-3[0]

ml_sin_xltz
	# if (x < 0)
	PUSH	-3[0]
	CONSTR	0.0
	LTR
	IFZ	ml_sin_xgez

	# result = 1.27323954 * x + .405284735 * x * x
	# 1.27323954 * x
	CONSTR	1.27323954
	PUSH	-3[0]
	MULR
	# 0.405284735 * x * x
	PUSH	-3[0]
	CONSTR	0.405284735
	PUSH	-3[0]
	MULR
	MULR
	# 1.27323954 * x + .405284735 * x * x
	ADDR
	POP	0[0]	
	
ml_sin_rltz_one
	# if (result < 0)
	PUSH	0[0]
	CONSTR	0.0
	LTR
	IFZ		ml_sin_rgez_one

	# sin = 0.225 * (result * -result - result) + result
	# (result * -result - result)
	PUSH	0[0]
	CONSTR	0.0
	PUSH	0[0]
	SUBR
	MULR
	PUSH	0[0]
	SUBR
	# (result * -result - result) * 0.225
	CONSTR	0.225
	MULR
	# (result * -result - result) * 0.225 + result
	PUSH	0[0]
	ADDR
	# result = ...
	POP	0[0]
	
	GOTO	ml_sin_done

ml_sin_rgez_one
	# sin = 0.225 * (result * result - result) + result
	# (result * result - result)
	PUSH	0[0]
	PUSH	0[0]
	MULR
	PUSH	0[0]
	SUBR
	# (result * -result - result) * 0.225
	CONSTR	0.225
	MULR
	# (result * -result - result) * 0.225 + result
	PUSH	0[0]
	ADDR
	# result = ...
	POP		0[0]

	GOTO	ml_sin_done

ml_sin_xgez
	# result = 1.27323954 * x - .405284735 * x * x
	# 1.27323954 * x
	CONSTR	1.27323954
	PUSH	-3[0]
	MULR
	# 0.405284735 * x * x
	PUSH	-3[0]
	CONSTR	0.405284735
	PUSH	-3[0]
	MULR
	MULR
	# 1.27323954 * x - .405284735 * x * x
	SUBR
	# result = ...
	POP	0[0]

ml_sin_rltz_two
	# if (result < 0)
	PUSH	0[0]
	CONSTR	0.0
	LTR
	IFZ	ml_sin_rgez_two

	# sin = 0.225 * (result * -result - result) + result
	# (result * -result - result)
	PUSH	0[0]
	CONSTR	0.0
	PUSH	0[0]
	SUBR
	MULR
	PUSH	0[0]
	SUBR
	# (result * -result - result) * 0.225
	CONSTR	0.225
	MULR
	# (result * -result - result) * 0.225 + result
	PUSH	0[0]
	ADDR
	# result = ...
	POP	0[0]
	
	GOTO	ml_sin_done
	
ml_sin_rgez_two
	# sin = 0.225 * (result * result - result) + result
	# (result * result - result)
	PUSH	0[0]
	PUSH	0[0]
	MULR
	PUSH	0[0]
	SUBR
	# (result * -result - result) * 0.225
	CONSTR	0.225
	MULR
	# (result * -result - result) * 0.225 + result
	PUSH	0[0]
	ADDR
	# result = ...
	POP		0[0]

ml_sin_done
	# retval = result
	PUSH	0[0]
	POP	-3[0]

	ADJUST	-1
	RET	0
