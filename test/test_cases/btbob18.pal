{
  9.pal
  total chaos. a stream of valid tokens with no order other than the first line.
}

program tokens(in, out);
procedure id3n71f13r id3n71f13r { .. } 
mod <> not <= begin not id3n71f13r } " >= 	
not  not ' and  const continue or // 
" ; of id3n71f13r 
id3n71f13r 
id3n71f13r 	
id3n71f13r 	} 
	begin 	var <> record 
exit // 
// <= and } of  >= while function do <=  <> ' 
then program var 	>= <> program .. begin function id3n71f13r 

not id3n71f13r 

and program not id3n71f13r then var type 
program id3n71f13r while >=  function record not record if id3n71f13r } 
and  id3n71f13r <= id3n71f13r \ := program var else { if { ' 
' array do array const type exit const exit else 	<= \ 
\ >= procedure 	do ' of and 	id3n71f13r procedure do if >= 	 div else begin while := array ; continue id3n71f13r 
id3n71f13r id3n71f13r begin <= else } ; div else else ; ..  do // := { 	var if var while // exit \ else } 
type program id3n71f13r <> do } begin then else 	id3n71f13r const } 
{ := type of div ; then 
or \ begin 	var { 		 then not 
id3n71f13r of procedure ' id3n71f13r procedure end .. ' 	exit div array id3n71f13r id3n71f13r while .. const id3n71f13r 	// <> array of record else id3n71f13r 	
id3n71f13r procedure while end id3n71f13r <= 
{ id3n71f13r const { 	exit of id3n71f13r var var // { 	while 		' end  	exit id3n71f13r else  >= while id3n71f13r program } id3n71f13r  mod ; 	array >= const 
:= else while 
<> var } 
// type type else type id3n71f13r id3n71f13r 
type id3n71f13r ; record array of  array or id3n71f13r do of of 
	' 	\ id3n71f13r type  	end not  .. then function <= procedure id3n71f13r while function id3n71f13r 
begin 
array \ 	begin begin 
procedure or function id3n71f13r type procedure end id3n71f13r \ := id3n71f13r mod id3n71f13r 
id3n71f13r >= type do ; 
' ; 	continue <> } function do continue procedure { // >= ; 
continue and end .. begin record end begin " else if 

div 
" continue ; 	" 
end  ' id3n71f13r and 	const { \ id3n71f13r then function 

id3n71f13r >= .. do { exit else function if div 
else and var program 	program // // div 
 not " if 
not then program ; id3n71f13r div or // id3n71f13r continue div 
end function type procedure ; const 
' 
end not 
program >= ; 
mod record >= 
program 
id3n71f13r id3n71f13r { 	or   id3n71f13r := 
while <= 
else " while <> procedure 
} not 	 \ then .. 
array mod id3n71f13r of function 	id3n71f13r } begin or end id3n71f13r .. \ id3n71f13r and record procedure  exit 	:= \ if 	id3n71f13r // 
<= 

var exit  do end do 

id3n71f13r := .. 	record else 	or id3n71f13r do type id3n71f13r and \ id3n71f13r end  " array id3n71f13r  var 
and record .. id3n71f13r 	id3n71f13r procedure record procedure >= 	id3n71f13r if id3n71f13r  begin if if 
of 
var program div then id3n71f13r 
	id3n71f13r while id3n71f13r array '  record procedure \ const then if exit array 	\ var .. mod then program div mod while id3n71f13r 
if 
and not var not 

var then 	var procedure type end and <>  do then 	
else { <= := <> var div var id3n71f13r type if { \ const ' id3n71f13r exit >= 
.. \ then do mod if // procedure while .. var procedure 
; and  type array div var array ' procedure of  
\ not and id3n71f13r then and end 	or   not <= 

procedure \ 	} const record <= and array 
id3n71f13r else id3n71f13r else id3n71f13r exit of id3n71f13r mod .. type record begin 
continue end continue and 
then 		of program div const continue exit if <> begin 
<= <= 
mod while <> 	 { 
else ;  then <> { <> 
not id3n71f13r and end then 	
else 
id3n71f13r function id3n71f13r end  ' mod end } div div '   
id3n71f13r := of <= <> ; <= do then 

function end 
>= ; type ; function <=  end of of or const \ else do id3n71f13r begin array continue  id3n71f13r and of 	>= procedure var type program record .. mod if and <= // 
begin .. 	\ ; 		while begin 
exit 
:= or div do record exit if 	id3n71f13r id3n71f13r <> := 	function function .. while } or array of // "  const 
while 	\   id3n71f13r 
else function of 
div then } else } := of 

\ // end id3n71f13r continue of <> div if record  function function continue else const id3n71f13r ' do id3n71f13r } not record then ' " var else // <= continue end then { not or function div 
{ while const else do of else // mod var := id3n71f13r id3n71f13r ; id3n71f13r array id3n71f13r ' 
:= >= 
type function >= >= <>  
not begin <> array " >= end id3n71f13r continue and not  

} .. of id3n71f13r type record 
type >= exit var type while 	exit := 	of not continue 
procedure exit >= id3n71f13r // of ; := 	begin 

<> 
' const var <> 
array } mod do  := <> := <> 
 <= while 
id3n71f13r id3n71f13r mod begin type id3n71f13r div }  mod // } id3n71f13r div 
; >= // begin var record id3n71f13r <> or id3n71f13r <= id3n71f13r array procedure or ; procedure type then and exit ' while do else end const and id3n71f13r id3n71f13r program else \ ; of begin 
and <= 	procedure else // id3n71f13r if record if const 


{  
 
 id3n71f13r { { // 
// program function id3n71f13r id3n71f13r div while ; id3n71f13r function  else 	id3n71f13r id3n71f13r id3n71f13r while if {  
array array 

 var // then continue .. record .. id3n71f13r mod end not // procedure then 
id3n71f13r or type { type not exit id3n71f13r continue id3n71f13r id3n71f13r 
.. then { record <> program begin .. ' ; exit if or continue procedure record not id3n71f13r not 
' end 	
then "  mod mod of >= div continue not do mod not begin mod \ := <= continue } not <> 	begin  while function div ; } 
while  	const continue 
program mod then mod and 
if div begin 
// \ " program 	<> mod end .. 

then const program } program if .. id3n71f13r  else 
" array id3n71f13r 
procedure 
<= id3n71f13r function else } var 
.. else begin end id3n71f13r 	program ; while 
id3n71f13r 
<=  type { { { type end 
' 
exit var procedure function id3n71f13r 	var while array // >= procedure function 
else id3n71f13r id3n71f13r of procedure function id3n71f13r do 
if div id3n71f13r or exit var of 		program \ array  not var if if { 
div of { begin else  type // 
<= do of  or procedure else not 
record 	; while { exit function  and 
; id3n71f13r >= function 
procedure else div <> const mod } <= <= and or := // then continue var not 
if then <> else continue and ' ' <= \ while var id3n71f13r continue and program  record " <> or and  not } ' <> 	<= or id3n71f13r } div type " } continue not var of } while id3n71f13r id3n71f13r array <> " 
\ id3n71f13r then id3n71f13r if procedure ; } 
..  type while <> end begin 	then " id3n71f13r { 	
id3n71f13r div //  or const var procedure // " } 
	begin exit >= <>  \ // else var var begin do 	 } := .. mod 
	:= id3n71f13r } or 
 id3n71f13r <> 
record  id3n71f13r of := 	program 
const if " := else <> id3n71f13r mod record id3n71f13r id3n71f13r ; id3n71f13r then var 	end id3n71f13r else  
.. ; array ; while while 
id3n71f13r 
type 
id3n71f13r .. not 	function not type continue mod end while 
end 
mod or  := program 	
>=  function id3n71f13r then of do  
do do program do else 
<> var  end div  continue id3n71f13r // } id3n71f13r if id3n71f13r } 
	.. if 
if else 
id3n71f13r record //  mod of id3n71f13r ; const ' " procedure // or 	program exit program { of 
or program do 	// not <> id3n71f13r function .. function ' of <= } do id3n71f13r of type procedure while id3n71f13r array function mod >= ; array { := 

then ; // begin procedure do exit >= ; mod 	// else if } end <> mod and end id3n71f13r >= mod of id3n71f13r id3n71f13r div id3n71f13r if id3n71f13r 

begin begin 
or 
.. { mod then >= then ; id3n71f13r of 
 	if { of exit end div id3n71f13r  program { end } 	array of if div program if div end  continue " exit 	exit of  <= <= // id3n71f13r <> else array  ; id3n71f13r id3n71f13r if ' end array ; id3n71f13r id3n71f13r 
<= if id3n71f13r of >= or else { id3n71f13r procedure } 
else else id3n71f13r .. .. id3n71f13r const record id3n71f13r begin .. begin >= record continue 	of .. array <= or " if 
id3n71f13r 
and or >= function id3n71f13r program 
do of array if id3n71f13r >= id3n71f13r then ; and id3n71f13r mod  function // do // else do  	of mod <= ; var id3n71f13r 	; 
exit procedure // id3n71f13r or and 
record do or <> mod while array do ' do := := while id3n71f13r record id3n71f13r 

id3n71f13r ; 
id3n71f13r id3n71f13r 
mod then <= \ or if { id3n71f13r 	else record \ const  
or <> .. .. := or end else { .. type function 
<> else mod program array do array id3n71f13r while 
then id3n71f13r record procedure { array procedure else ' exit program 
id3n71f13r then var program id3n71f13r \ id3n71f13r record while program 
else //  id3n71f13r procedure record and 
; ;  array id3n71f13r const  end of array >= ..  while 
if program 	exit array id3n71f13r while procedure 	

' ' 		exit record 	do array id3n71f13r if " procedure ; end } := id3n71f13r and array or 
\ continue  or begin <= record type exit 
	begin record array if id3n71f13r 
:= id3n71f13r or 	{ 	
