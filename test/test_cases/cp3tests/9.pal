{
	Test 9;
	THE TEST OF DOOOOOOOOOOOOOOM!!!!!!!!!!!!!!!!

	Should output:
	42
}


program test(input, output);

type 
	z = record 
		a : integer;
		b : real;
		c : char
		end;
var
	a : integer;
	b : real;
	c : char;
	d : array[2..34] of array[45..46] of array[34..36] of array[boolean] of array['a'..'c'] of integer;  
	y : z;
	o : integer;

function dorecursion(number : integer) : integer;
	begin
			if (number = 0) then
				dorecursion := 20
			else
				dorecursion := dorecursion(number-1);
	end;

function domath() : integer;
	
var
	a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p : z;
	begin
		domath := dorecursion(12*23);
	end;

function dostuff() : integer;
	begin
		dostuff := domath();
	end;



function dolibraryStuff() : real;
	begin
		dolibraryStuff := ln(sin(ord(chr(ord(round(sqrt(sqr(pred(2) * succ(0) * 2) + 5) + 2))))) + 23) // ln(sin(5) + 23)
	end;



procedure placeTheValueTemp();
	begin
		d[20][45][35][true]['b'] := 2 + dostuff(); //2 + 20
	end;



procedure doSomeLoops();
	
var
	a : integer;
	begin
		a := 0;
		while (a <> 10) do
		begin
			d[20][45][35][true]['b'] := d[20][45][35][true]['b'] + y.a;
			a := a + 1;
		end;
	end;


procedure nestedForNoReason();
	procedure a();
		procedure b();
			procedure c();
				procedure d();
					procedure e();
						procedure f();
							procedure g();
								procedure h();
									procedure i();
										procedure j();
										begin
											y.a := 2;
										end;
									begin
										j();
									end;
								begin
									i();
								end;
							begin
								h();
							end;
						begin
							g();
						end;
					begin
						f();
					end;
				begin
					e();
				end;
			begin
				d();
			end;
		begin
			c();
		end;
	begin
		b();
	end;
begin
	a();
end;


function calculateTheJumpIndex() : integer;
	type
		a = integer;
		b = a;
		c =b;
		d=c;
		e=d;
		f=e;
		g=f;
		h=g;
		i=h;
		j=i;
	var
		l : j;
	begin
		if (1=1) then
		begin
			while (true) do
				begin
					while (true) do
						begin
							while (true) do
								begin
									while (true) do
										begin
											if (1=1) then
											begin
												if (2=2) then
													begin
														if (3=3) then
														begin
															exit;
														end;
													end;
											end;
										end;
									exit;
								end;
							exit;
						end;
					exit;
				end;
		end;

		if (6 = (1+(1+(1+(1*3))))) then
		begin
			y.c := 'f';
			while (y.c = 'f') do
			begin
				if (true) then
				begin
					l := 40;
					y.c := 'g';
					continue;
					l := 900;
				end;
			end;

			while (true) do
			begin
				if (true) then
				begin
					calculateTheJumpIndex := l + 5;
					exit;
					y.a := 9 div 0;
				end;
			end;

		end;;		
	end;


procedure calculateSecondJump(var a : integer);
	begin
		a := 35;
	end;


begin
	nestedForNoReason();
	placeTheValueTemp();
	doSomeLoops();
	calculateSecondJump(o);
	writeln(d[20][calculateTheJumpIndex()][o][true]['b']);
end.
							
