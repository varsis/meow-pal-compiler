{}
{
	Cmput 415 - Team YACC
	8.pal
	Testing lexor and parser for correctness.
	This file should pass with no errors as all valid pal.
}

program arrayTests(input, output);

const
    MAXX = 08740;
    MAXY = 25;

type
    TArr = array [0..MAXY] of array [0..MAXX] of integer;

    TCell = record
        x: integer;
        y: integer
    end;

    TListCell = record
        x: integer;
        y: integer;
        G: integer;
        parent: TCell
    end;

    TListArr = array [1..10000] of TListCell;

    TList = record
        arr: TListArr;
        len: integer
    end;

var
    i, j, minind, ind, c: integer;
    start, finish: TCell;
    current: TListCell;
    field: TArr;
    opened, closed: TList;



procedure arrayTests(input: output);
type
	string = array[0..127] of char;
	Dog = (poodle,germanShep,littleYappyOne);
	legalArrayDec = array[1..10] of array [1..10] of integer;
begin
end;







procedure arrayTests(input: output);
type
	string = array[0..127] of char;
	Dog = (poodle,germanShep,littleYappyOne);
	legalArrayDec = array[1..10] of array [1..10] of integer;
begin
end;



{}
procedure test(input: output);
var
	a : boolean;
	a : array [real] of boolean;
begin
end;


{}
// should parse fine

procedure{comment as token separator}p(input: output);

begin
end;


{}
//comments in weird places, seprator. should pass.

procedure fizzbop(input:{comment}output);
begin
	a := abcdef{sdfsdf};
end;


procedure test(input: output);
begin
	if a then
	begin
		a := a + 1;
		b := 2;
	end
	else
		a := a + 2;
	
	a := b;
	

	a := 12;
	a := 12;

end;

{}
procedure expressionTest (input: output);
var 
	a : integer;
begin
	a := 3;
end;


procedure expressionTest (input: output);
var 
	a : integer;
begin
	a := 3;
	b:=3;
end;



{}
//really long int. should pass

procedure expressionTest (input: output);
var 
	a : integer;
begin
	a := 311111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111;
end;



procedure expressionTest (input: output);
var 
	a : integer;
begin
	a := 346565464564546;
end;



{}
//assign real to an int type. should fail sematically but is not a syntax error

procedure expressionTest (input: output);
var 
	a : integer;
begin
	a := 3222222222222222222.3;
end;


{}
//bad integer. should pass

procedure expressionTest (input: output);
var 
	a : integer;
begin
	a := a333;
end;



{}
// test array declaration

procedure arrayTests(input: output);
type
	string = array[0..127] of char;
	Dog = (poodle,germanShep,littleYappyOne);
	dog = array[Dog] of integer;
	legalArrayDec = array[1..10] of array [1..10] of integer;





begin
end;




{4}
procedure test(input: output);
begin

	foobar(foo, (bar + zap));
end;


{}
//test a expression when it assigns to variable. should pass.

procedure test(input:output);
var
	a : real;
begin 
	a := 32.32-32;
end;



{}
procedure example(input: output);
{ program takes input/output from terminal }
type string = array[1..7] of char;
var x : integer;
y : integer;
answer : integer;
flag : char;
str : string;
function gcd( a : integer; b : integer ) : integer;
begin
{ Note where semi-colons are legal! }
if b = 0 then
gcd := a
else
gcd := gcd( b, a mod b )
end;
function lcm( a : integer; b : integer ) : integer;
begin
if (a = 0) or (b = 0) then
lcm := 0
else
lcm := (a * b) div gcd( a, b )
end;
begin { main-program }
read( flag );
{ loop until an 's' (stop) is seen - remember no EOF
tests are possible.
}
while flag <> 's' do
{ while stmnts are the only loop construct allowed }
begin
read( x, y );
readln();
if flag = 'g' then begin { 'g' flag means compute gcd }
answer := gcd( x, y );
str := 'Gcd of ';
end;
if flag = 'l' then begin { 'l' flag means compute lcm }
answer := lcm( x, y );
str := 'Lcm of ';
end;
write(str, x, ' and', y, ' is', answer);
writeln( );
read( flag )
end
end;


{}
// should parse correctly

procedure foo(in: out);
begin
end;



procedure test(input: output);
	var 
		x: record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : record red : blue end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end;
begin
end;


procedure expressionTest (input: output);
var 
	a, b : integer;
	c : real;
begin
	a := 3;
	a := a*4;
	c := (b+a)/2
end;



procedure test(input: output);
begin
	arr[12][d-12 + 2] := b[sixteen][funcCall(x,y,z['stringindex'])];
	rec.member[arrayindex * 14 div operand].member := fizbuz;
end;

{}
// using type of identifier

procedure test(input: output);
	var x: boooooooo;
begin
end;


{}
// 

procedure test(input: output);
	var 
		x: string;
begin
end;





begin
end.
